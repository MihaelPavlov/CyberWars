@model CyberWars.Web.ViewModels.HomeViews.PlayerDataView
@using System.Linq;
@using CyberWars.Data.Models.Player;
@using CyberWars.Data.Models.Ability;
@using Microsoft.AspNetCore.Mvc;
@using CyberWars.Data.Common.Repositories;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
@inject IDeletableEntityRepository<Player> playerRepository;
@inject IDeletableEntityRepository<PlayerAbility> playerAbilityRepository;
@inject IDeletableEntityRepository<Level> levelRepository;

@{
    var player = await this.playerRepository.All().FirstOrDefaultAsync(x => x.Id == Model.Id);
    var playerAbilities = await this.playerAbilityRepository.All().Where(x => x.PlayerId == player.Id).ToListAsync();

    var level = Model.Levels.OrderBy(x => x.Exp).FirstOrDefault(x => x.Exp > Model.Experience);

    var healthWidth = (decimal)Model.Health / (decimal)Model.MaxHealth * 100;

    var energyWidth = (decimal)Model.Energy / (decimal)Model.MaxEnergy * 100;

    var levels = await this.levelRepository.All().OrderBy(x => x.LevelName).ToListAsync();

    var lastLevel = levels[levels.Count - 1];
}
<div class="stats">
    <div class="item item1">
        <div class="tooltip">
            <span class="tooltiptext">Money</span>
            <img class="Cash" src="/images/MoneyIcon.png" alt=""> <span class="Money">@Model.Money</span>
        </div>
        <div class="tooltip">
            <span class="tooltiptext">Points</span>
            <img class="Expirience" src="/images/LampIcon.png" alt=""> <span class="Exp">@playerAbilities.Sum(x => x.Points)</span>
        </div>
    </div>
    <div class="item item2">
        <div class="statsHealthEnergy">
            <div class="Health tooltip">
                <span class="tooltiptext">Heal</span>
                <img src="/images//HeartIcon.png" alt="">
                <div class="meter">
                    <span class="line" style="width: @(healthWidth + "%")"></span>
                </div>
                <!-- <img  class="green" src="/Images _Layout/GreenLine.png" alt=""> -->
                <span class="points"> @Model.Health / @Model.MaxHealth</span>
            </div>
            <div class="Energy tooltip">
                <span class="tooltiptext">Energy</span>
                <img src="/images/LightIcon.png" alt="">
                <div class="meter blue">
                    <span class="line" style="width: @(energyWidth + "%")"></span>
                </div>
                <span class="points"> @Model.Energy / @Model.MaxEnergy &nbsp;</span>
            </div>
        </div>
    </div>
    <div class="item item3 ">
        <div class="Stars ">
            <img class="star" src="/images/Star.png" alt="">
            <span class="text">
                @if (level == null)
                {
                    @Model.Experience;
                }
                else
                {
                    @(Model.Experience+ "/" + level.Exp);

                }
            </span> <br>
            @{
                if (level == null)
                {

                }
                else if (level.LevelName - 1 != Model.Level)
                {
                    player.Level = level.LevelName - 1;
                    playerRepository.Update(player);
                    await playerRepository.SaveChangesAsync();
                }
            }

            @if (level==null)
            {
                <img class="star " src="/images/Star.png" alt=""> <span class="text">LastLevel</span>
            }
            else
            {
                <img class="star " src="/images/Star.png" alt=""> <span class="text">@(level.LevelName -1)</span>
            }
        </div>
    </div>
</div>
@section CssFile{
    <link rel="stylesheet" href="/css/style.css">
}
@section MyScript{
    <script src="/js/AnimationStatsLine.js" asp-append-version="true"></script>
    <script type="text/javascript"
            src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js"></script>
}
