@using System.Security.Claims
@using CyberWars.Web.ViewModels.WebViews.Job
@using CyberWars.Data.Models.Ability
@using CyberWars.Data.Models.Player
@using CyberWars.Data.Common.Repositories
@using CyberWars.Services.Mapping
@using CyberWars.Web.ViewModels.HomeViews
@using CyberWars.Data.Models.Job

@model IEnumerable<JobViewModel>

@inject IDeletableEntityRepository<PlayerAbility> playerAbilityRepository
@inject IDeletableEntityRepository<PlayerJob> playerJobsRepository
@inject IDeletableEntityRepository<Player> playerRepository

@{
    var userId = this.User.FindFirstValue(ClaimTypes.NameIdentifier);

    var playerAbilities = this.playerAbilityRepository.All().Where(x => x.Player.UserId == userId).To<PlayerAbilitiesViewModel>().ToList();

    var player = this.playerRepository.All().FirstOrDefault(x => x.UserId == userId);

    var playerJobs = this.playerJobsRepository.All().Where(x => x.PlayerId == player.Id).ToList();
}

@foreach (var job in Model)
{
    var canAcceptTheJob = true;
    var pointReward = job.JobRewardAbilityNames.Split(" ").ToArray();
    <div class="frellacingTable">
        <span class="jobTittle">Job</span>
        <h3 class="frellancingHeader">@job.JobName</h3>
        <span>Requirements</span>
        <ul>
            @foreach (var requirement in job.JobJobRequirements)
            {
                var playerAbility = playerAbilities.FirstOrDefault(x => x.AbilityName == requirement.Requirement.Name);

                if (playerAbility.Points >= requirement.Requirement.Points)
                {
                    <li>@requirement.Requirement.Name - @requirement.Requirement.Points</li>
                }
                else
                {
                    canAcceptTheJob = false;
                    <li id="btn-disable">@requirement.Requirement.Name - @requirement.Requirement.Points</li>
                }
            }
        </ul>
        <div class="rewardDiv">
            <p class="rewardHeading">Reward</p>
            <span>@job.JobRewardExp Exp</span>
            <img class="jobMoneyIcon" src="/images/Star.png" alt="">
            <span>@pointReward.Count()+ Points</span>
            <img class="jobMoneyIcon" src="/images/Academy/@(pointReward[0] =="C#" ? "Csharp.png" : pointReward[0] + ".png")" alt="">
            <br>
            <span>@job.JobRewardMoney Money</span>
            <img class="jobMoneyIcon" src="/images//MoneyIcon.png" alt="">
        </div>
        @if (player.Level < job.JobLevelRequirement)
        {
            <a class="btn yellow rounded " id="btn-disable" href="">For Level (@job.JobLevelRequirement)</a>
        }
        else if (!canAcceptTheJob)
        {
            <a class="btn yellow rounded " id="btn-disable" href="">Accept</a>
        }
        else if (playerJobs.Any(x => x.JobId == job.JobId))
        {
            var playerJob = playerJobs.FirstOrDefault(x => x.JobId == job.JobId);

            var isPlayedToday = playerJob.LastDatePlayed == DateTime.Today;

            if (isPlayedToday)
            {
                <a class="btn yellow rounded" id="btn-disable">Job is Complete</a>
            }
            else
            {
                <form method="post" asp-controller="Web" asp-action="GetRewardFromJob">
                    <button type="submit" class="btn yellow rounded" name="jobId" value="@job.JobId">Complete</button>
                </form>
            }
        }
        else if (player.Level >= job.JobLevelRequirement)
        {
            <form method="post" asp-controller="Web" asp-action="GetRewardFromJob">
                <button type="submit" class="btn yellow rounded" name="jobId" value="@job.JobId">Complete</button>
            </form>
        }
    </div>
}

@section MyScript{
    <script src="~/js/Timer.js" asp-append-version="true"></script>
}

@section CssFile {
    <link rel="stylesheet" href="/css/Web/frellancing.css">
}

@section PageHeader{
    Jobs
}
